name: Release

on:
  release:
    types: [published]

env:
  CARGO_TERM_COLOR: always

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
    
    - name: Check formatting
      run: cargo fmt --all -- --check
    
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
    
    - name: Run tests
      run: cargo test --verbose
    
    - name: Validate version matches tag
      run: |
        CARGO_VERSION=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        echo "Cargo version: $CARGO_VERSION"
        echo "Tag version: $TAG_VERSION"
        if [ "$CARGO_VERSION" != "$TAG_VERSION" ]; then
          echo "Version mismatch between Cargo.toml ($CARGO_VERSION) and tag ($TAG_VERSION)"
          exit 1
        fi

  build:
    name: Build Release Binaries
    needs: validate
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: valve_pak
            asset_name: valve_pak-linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: valve_pak.exe
            asset_name: valve_pak-windows-x86_64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: valve_pak
            asset_name: valve_pak-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: valve_pak
            asset_name: valve_pak-macos-aarch64

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}
    
    - name: Strip binary (Unix)
      if: matrix.os != 'windows-latest'
      run: strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
    
    - name: Create archive (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cd target/${{ matrix.target }}/release
        tar czf ${{ matrix.asset_name }}.tar.gz ${{ matrix.artifact_name }}
        cd - 
        mv target/${{ matrix.target }}/release/${{ matrix.asset_name }}.tar.gz .
    
    - name: Create archive (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd target/${{ matrix.target }}/release
        7z a ${{ matrix.asset_name }}.zip ${{ matrix.artifact_name }}
        cd ../../../
        mv target/${{ matrix.target }}/release/${{ matrix.asset_name }}.zip .
    
    - name: Upload release asset (Unix)
      if: matrix.os != 'windows-latest'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ${{ matrix.asset_name }}.tar.gz
        asset_name: ${{ matrix.asset_name }}.tar.gz
        asset_content_type: application/gzip
    
    - name: Upload release asset (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ${{ matrix.asset_name }}.zip
        asset_name: ${{ matrix.asset_name }}.zip
        asset_content_type: application/zip

  publish:
    name: Publish to Crates.io
    needs: [validate, build]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Login to crates.io
      run: cargo login ${{ secrets.CARGO_REGISTRY_TOKEN }}
    
    - name: Publish to crates.io
      run: cargo publish --no-verify
    
    - name: Wait for crates.io propagation
      run: sleep 30
    
    - name: Verify publication
      run: |
        CARGO_VERSION=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')
        echo "Waiting for version $CARGO_VERSION to be available on crates.io..."
        for i in {1..10}; do
          if cargo search valve_pak | grep -q "valve_pak = \"$CARGO_VERSION\""; then
            echo "✅ Package successfully published to crates.io"
            exit 0
          fi
          echo "Attempt $i: Package not yet available, waiting..."
          sleep 10
        done
        echo "⚠️ Package may still be propagating on crates.io"

  docs:
    name: Update Documentation
    needs: publish
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Build documentation
      run: cargo doc --no-deps --all-features
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./target/doc
        destination_dir: docs
