searchState.loadedDescShard("valve_pak", 0, "VPK (Valve Pak) file format library\nCreates a new VPK from a directory\nOpens an existing VPK file for reading\nMetadata for a file stored in a VPK archive\nA file-like object for files inside VPK archives\nGets the file path within the VPK\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGets the total file length\nGets the file metadata\nGets the current position in the file\nReads all content into a Vec\nReads the entire file as a UTF-8 string\nSaves the entire file to the specified path\nTotal length of the file (preload + file data)\nVerifies the file contents against the stored CRC32\nMaximum archive index for embedded files\nSuffix value for valid metadata entries\nVPK magic signature\nCalculates the length needed to store a null-terminated …\nJoins filename parts back together\nNormalizes a path for VPK storage (uses forward slashes)\nReads a null-terminated string from the reader\nReads a null-terminated string from a buffered reader …\nReads exactly n bytes from reader into a new Vec\nSplits a filename into name and extension parts\nWrites a null-terminated string to the writer\nMain VPK structure that handles both reading and writing\nVPK checksums (V2 only)\nVPK header information\nVPK file format versions\nChecks if a file exists in the VPK\nGets the number of files in the VPK\nGets an iterator over all file paths\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new VPK from a directory structure\nGets a file from the VPK\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLists all files in the VPK\nOpens an existing VPK file for reading\nSaves the VPK to the specified path\nVerifies the VPK checksums (V2 only)\nGets the VPK version")